

## Load required packages
library(gstat)                                 
library(sp)                                    
library(plyr)                            
library(fields)  
library(rgdal)
require(raster)


## Set the working directory 
setwd("C:/Users/mmama/Downloads/GIS714")


## Read in raster mask to crop Guassian sequential simulations 
rast <- raster("data/CONUS_2017_data_mask.tif")
lakes <- spTransform(readOGR("data/lakes","updatedValidLakes"), projection(rast))
jesup.shp <- subset(lakes, GNIS_NAM_1 == "Jesup, Lake")
rast.crop <- crop(rast, extent(jesup.shp))
rast.mask <- mask(rast.crop, jesup.shp)


## Set extent and size of the rasters to be created 
nx = 40                                       
ny = 40                                       
xsize = 300                                  
ysize = 300 


## Calculate the remaining required grid parameters 
xmin = 472400
ymin = 3174000
xmax = xmin + nx * xsize
ymax = ymin + ny * ysize


### Define required functions
nscore <- function(x) {                        # by Ashton Shortridge, 2008
  # Takes a vector of values x and calculates their normal scores. Returns 
  # a list with the scores and an ordered table of original values and
  # scores, which is useful as a back-transform table. See backtr().
  nscore <- qqnorm(x, plot.it = FALSE)$x  # normal score 
  trn.table <- data.frame(x=sort(x),nscore=sort(nscore))
  return (list(nscore=nscore, trn.table=trn.table))
}
addcoord <- function(nx,xmin,xsize,ny,ymin,ysize) { # Michael Pyrcz, March, 2018                      
  # makes a 2D dataframe with coordinates based on GSLIB specification
  coords = matrix(nrow = nx*ny,ncol=2)
  ixy = 1
  for(iy in 1:nx) {
    for(ix in 1:ny) {
      coords[ixy,1] = xmin + (ix-1)*xsize  
      coords[ixy,2] = ymin + (iy-1)*ysize 
      ixy = ixy + 1
    }
  }
  coords.df = data.frame(coords)
  colnames(coords.df) <- c("X","Y")
  coordinates(coords.df) =~X+Y
  return (coords.df)
  
}  


## Define coords and convert to the projection for Lake Jesup  
coords <- addcoord(nx,xmin,xsize,ny,ymin,ysize)
proj4string(coords) <- "+proj=utm +zone=17 ellps=WGS84 +ellps=WGS84"


## Define a vector of months 
months <- c("JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC")


## Loop through each month and analyze each water quality parameter 
for(month in months){
  
  ## Read in the data for the given month and convert to a SpatialPointsDataFrame 
  mydata <- read.csv(paste0("csvs/",month,"_data.csv"))
  coordinates(mydata) <- ~ LON + LAT  
  proj4string(mydata) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
  mydata <- spTransform(mydata, CRS("+proj=utm +zone=17 ellps=WGS84"))
  
  
  ## Compute variogram for SECCHI 
  sill <- var(mydata$SECCHI, na.rm = T) 
  vm.gaus <- vgm(psill = 1.0*sill, "Exp", 600, anis = c(060, 0.2), nugget = 0.0*sill, kappa = 5)
  secchi.krig <- krige(SECCHI~1, mydata[!is.na(mydata$SECCHI),], coords, model = vm.gaus, nmax = 100, nsim = 4)
  ## Mask to Lake Jesup
  secchi.proj <- spTransform(secchi.krig, projection(rast.mask))
  secchi.rast <- rasterize(secchi.proj, rast.mask)
  secchi.mask <- mask(secchi.rast, rast.mask)
  ## Save as a raster
  writeRaster(secchi.mask$sim1, paste0("results/", month, "_SECCHI.tif"), overwrite = T)
  
  
  ## Compute variogram for DO
  sill <- var(mydata$DO, na.rm = T)                    
  vm.gaus <- vgm(psill = 1.0*sill, "Exp", 600, anis = c(060, 0.2), nugget = 0.0*sill, kappa = 5)
  do.krig <- krige(DO~1, mydata[!is.na(mydata$DO),], coords, model = vm.gaus, nmax = 100, nsim = 4)
  ## Mask to Lake Jesup
  do.proj <- spTransform(do.krig, projection(rast.mask))
  do.rast <- rasterize(do.proj, rast.mask)
  do.mask <- mask(do.rast, rast.mask)
  ## Save as a raster
  writeRaster(do.mask$sim1, paste0("results/", month, "_DO.tif"), overwrite = T)  
  
  
  ## Compute variogram for TN
  sill <- var(mydata$TN, na.rm = T)                   
  vm.gaus <- vgm(psill = 1.0*sill, "Exp", 600, anis = c(060, 0.2), nugget = 0.0*sill, kappa = 5)
  tn.krig <- krige(TN~1, mydata[!is.na(mydata$TN),], coords, model = vm.gaus, nmax = 100, nsim = 4)
  ## Mask to Lake Jesup
  tn.proj <- spTransform(tn.krig, projection(rast.mask))
  tn.rast <- rasterize(tn.proj, rast.mask)
  tn.mask <- mask(tn.rast, rast.mask)
  ## Save as a raster
  writeRaster(tn.mask$sim1, paste0("results/", month, "_TN.tif"), overwrite = T)  
  
  
  ## Compute variogram for TP
  sill <- var(mydata$TP, na.rm = T)                   
  vm.gaus <- vgm(psill = 1.0*sill, "Exp", 600, anis = c(060, 0.2), nugget = 0.0*sill, kappa = 5)
  tp.krig <- krige(TP~1, mydata[!is.na(mydata$TP),], coords, model = vm.gaus, nmax = 100, nsim = 4)
  ## Mask to Lake Jesup
  tp.proj <- spTransform(tp.krig, projection(rast.mask))
  tp.rast <- rasterize(tp.proj, rast.mask)
  tp.mask <- mask(tp.rast, rast.mask)
  ## Save as a raster
  writeRaster(tp.mask$sim1, paste0("results/", month, "_TP.tif"), overwrite = T)
  
  
  ## Compute variogram for TURBIDITY
  sill <- var(mydata$TURBIDITY, na.rm = T)                   
  vm.gaus <- vgm(psill = 1.0*sill, "Exp", 600, anis = c(060, 0.2), nugget = 0.0*sill, kappa = 5)
  turb.krig <- krige(TURBIDITY~1, mydata[!is.na(mydata$TURBIDITY),], coords, model = vm.gaus, nmax = 100, nsim = 4)
  ## Mask to Lake Jesup
  turb.proj <- spTransform(turb.krig, projection(rast.mask))
  turb.rast <- rasterize(turb.proj, rast.mask)
  turb.mask <- mask(turb.rast, rast.mask)
  ## Save as a raster
  writeRaster(turb.mask$sim1, paste0("results/", month, "_TURB.tif"), overwrite = T)

}
